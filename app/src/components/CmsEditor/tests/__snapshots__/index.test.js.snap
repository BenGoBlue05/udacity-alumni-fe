exports[`<CmsEditor /> should render with default props 1`] = `
<div>
  <div>
    <input
      onChange={[Function bound handleInputChange]}
      placeholder="Title"
      type="titleInput"
      value="" />
  </div>
  <MegadraftEditor
    editorState={
      EditorState {
        "_immutable": Object {
          "allowUndo": true,
          "currentContent": Object {
            "blockMap": Object {
              "be3om": Object {
                "characterList": Array [],
                "data": Object {},
                "depth": 0,
                "key": "be3om",
                "text": "",
                "type": "unstyled"
              }
            },
            "selectionAfter": Object {
              "anchorKey": "be3om",
              "anchorOffset": 0,
              "focusKey": "be3om",
              "focusOffset": 0,
              "hasFocus": false,
              "isBackward": false
            },
            "selectionBefore": Object {
              "anchorKey": "be3om",
              "anchorOffset": 0,
              "focusKey": "be3om",
              "focusOffset": 0,
              "hasFocus": false,
              "isBackward": false
            }
          },
          "decorator": CompositeDraftDecorator {
            "_decorators": Array [
              Object {
                "component": [Function Link],
                "strategy": [Function findLinkEntities]
              }
            ]
          },
          "directionMap": Object {
            "be3om": "LTR"
          },
          "forceSelection": false,
          "inCompositionMode": false,
          "inlineStyleOverride": null,
          "lastChangeType": null,
          "nativelyRenderedContent": null,
          "redoStack": Array [],
          "selection": Object {
            "anchorKey": "be3om",
            "anchorOffset": 0,
            "focusKey": "be3om",
            "focusOffset": 0,
            "hasFocus": false,
            "isBackward": false
          },
          "treeMap": Object {
            "be3om": Array [
              Object {
                "decoratorKey": null,
                "end": 0,
                "leaves": Array [
                  Object {
                    "end": 0,
                    "start": 0
                  }
                ],
                "start": 0
              }
            ]
          },
          "undoStack": Array []
        }
      }
    }
    onChange={[Function bound onChange]}
    placeholder="Tell a story ..." />
  <Section
    pad={
      Object {
        "vertical": "medium"
      }
    }
    style={
      Object {
        "marginTop": 100
      }
    }>
    <undefined
      onSetStatus={[Function bound setStatus]}
      onToggleSpotlight={[Function bound setSpotlightToggle]}
      spotlighted={false}
      status={0} />
    <Button
      className="button undefined"
      label="Save"
      onClick={[Function bound publish]}
      type="button" />
  </Section>
</div>
`;
